version: 2.1
orbs:
  azure-cli: circleci/azure-cli@1.2.0
  windows: circleci/windows@2.2.0
  
jobs:
  build-application:
    description: Build application with Release configuration
    executor:
      name: windows/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "BeerLeagueHockey.csproj" }}
      - run:
          name: "Install project dependencies"
          command: dotnet.exe restore
      - run:
          name: "Build Application according to some given configuration"
          command: dotnet.exe build --configuration Release
      - run:
          name: "Publish to a subfolder"
          command: |
            dotnet.exe publish --configuration Release --output ../app-publish
            cd ../app-publish
            dir
            cd tools
            7za.exe a ../../app-publish.zip *
      - persist_to_workspace:
          root: ../
          paths:
            - app-publish.zip

  terraform-plan:
    docker:
      - image: zenika/terraform-azure-cli:latest
    steps:
      - checkout
      - run:
          name: prepare terraform env vars
          command: |
            echo 'export ARM_SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID}"' >> $BASH_ENV
            echo 'export ARM_TENANT_ID="${AZURE_TENANT}"' >> $BASH_ENV
            echo 'export ARM_CLIENT_ID="${AZURE_SP_APPID}"' >> $BASH_ENV
            echo 'export ARM_CLIENT_SECRET="${AZURE_SP_PASSWORD}"' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: terraform plan
          command: |
            cd infrastructure
            terraform init
            terraform plan -out=tfplan -var "sql-login=${SQL_ADMIN_LOGIN}" -var "sql-password=${SQL_ADMIN_PASSWORD}" -var "sql-threat-email=${SQL_THREAT_EMAIL}"
            terraform show tfplan 
            echo "Checking status to continue..."
            count=$(terraform show tfplan | grep -c "Your infrastructure matches the configuration") || true
            if [ $count -gt 0 ]; then 
              echo "No changes, infrastructure is up to date";
            else 
              echo "apply start"
              terraform apply "tfplan"  
              echo "apply end"
            fi

            echo $(terraform output resource_group_name) > ../tf-resource_group_name
            echo $(terraform output app_name) > ../tf-app_name
            echo $(terraform output app_staging_url) > ../tf-app_staging_url
            echo $(terraform output db_server_name) > ../tf-db_server_name
            echo $(terraform output db_database_name) > ../tf-db_database_name

      - persist_to_workspace: # store the built files into the workspace for other jobs.
          root: ./
          paths:
            - "*"

  deploy-application:
    docker:
      - image: mcr.microsoft.com/azure-cli:latest
    environment:
      VERSION_NUMBER: 0.0.0.<< pipeline.number >>
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: import terraform outputs
          command: |
            cd /tmp/workspace
            resource_group_name=$(cat tf-resource_group_name)
            app_name=$(cat tf-app_name)
            app_staging_url=$(cat tf-app_staging_url)
            db_server_name=$(cat tf-db_server_name)
            db_database_name=$(cat tf-db_database_name)
            echo "export AZURE_RG_NAME=$resource_group_name" >> $BASH_ENV
            echo "export AZURE_APP_NAME=$app_name" >> $BASH_ENV
            echo "export AZURE_APP_STAGING_URL=$app_staging_url" >> $BASH_ENV
            echo "export DB_SERVER_NAME=$db_server_name" >> $BASH_ENV
            echo "export DB_DATABASE_NAME=$db_database_name" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
           

      - run:
          name: Capture public IP
          command: |
            public_ip=$(curl -s https://api.ipify.org)
            echo "export PUBLIC_IP=$public_ip" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Azure Staging Deploy
          command: |
            cd /tmp/workspace
            ls -l

            # Deploy to staging slot
            az login --service-principal -u ${AZURE_SP_NAME} -p ${AZURE_SP_PASSWORD} --tenant ${AZURE_TENANT}
            echo "az webapp deployment source config-zip -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging --src app-publish.zip"
            echo "abc############################################################"
            dir
            az webapp deployment source config-zip -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging --src app-publish.zip
            echo "az webapp start -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging"
            az webapp start -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging

            # TEMP - add/update configs - this should be handled by a config mgmt service or re-usable script tied to config mgmt
            app_conn_string="Server=tcp:${DB_SERVER_NAME}.database.windows.net,1433;Initial Catalog=${DB_DATABASE_NAME};Persist Security Info=False;User ID=${SQL_APP_NAME};Password=${SQL_APP_PASSWORD};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
            az webapp config connection-string set -t SQLAzure -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging --settings Database="${app_conn_string}"

      - run:
          name: Database Migration
          command: |
            echo "Adding firewall rule for: ${PUBLIC_IP}"
            az login --service-principal -u ${AZURE_SP_NAME} -p ${AZURE_SP_PASSWORD} --tenant ${AZURE_TENANT}
            az sql server firewall-rule create --subscription ${AZURE_SUBSCRIPTION_ID} -s ${DB_SERVER_NAME} -g ${AZURE_RG_NAME} -n CircleCI-Job-$CIRCLE_JOB --start-ip-address $PUBLIC_IP --end-ip-address $PUBLIC_IP
            #dotnet tool install --global dotnet-ef
            #dotnet ef database update

      - run:
          name: Database Migration - Firewall Cleanup
          command: |
            echo "Removing firewall rule for: ${PUBLIC_IP}"
            az login --service-principal -u ${AZURE_SP_NAME} -p ${AZURE_SP_PASSWORD} --tenant ${AZURE_TENANT}
            az sql server firewall-rule delete --subscription ${AZURE_SUBSCRIPTION_ID} -s ${DB_SERVER_NAME} -g ${AZURE_RG_NAME} -n CircleCI-Job-$CIRCLE_JOB
          when: always

      - run:
          name: Azure Production Swap
          command: |
            # Swap into production
            echo "Performing swap..."
            az login --service-principal -u ${AZURE_SP_NAME} -p ${AZURE_SP_PASSWORD} --tenant ${AZURE_TENANT}
            az webapp deployment slot swap -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging --target-slot production
            echo "Swap complete."

      - run:
          name: Shutdown staging slot
          command: |
            # Shutdown old version
            echo "Shutting down old version..."
            az webapp stop -g ${AZURE_RG_NAME} -n ${AZURE_APP_NAME} -s staging
          when: always

workflows:
  build_and_deploy:
    jobs:
      - build-application
      - terraform-plan:
          filters:
            branches:
              only: main
      - deploy-application:
          requires:
            - build-application
            - terraform-plan
          filters:
            branches:
              only: main
